// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        (unknown)
// source: RepMsg.proto

package pb

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type UniMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgMime map[string]string `protobuf:"bytes,2,rep,name=msg_mime,json=msgMime,proto3" json:"msg_mime,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Msg     []byte            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *UniMsg) Reset() {
	*x = UniMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_RepMsg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniMsg) ProtoMessage() {}

func (x *UniMsg) ProtoReflect() protoreflect.Message {
	mi := &file_RepMsg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniMsg.ProtoReflect.Descriptor instead.
func (*UniMsg) Descriptor() ([]byte, []int) {
	return file_RepMsg_proto_rawDescGZIP(), []int{0}
}

func (x *UniMsg) GetMsgMime() map[string]string {
	if x != nil {
		return x.MsgMime
	}
	return nil
}

func (x *UniMsg) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

var File_RepMsg_proto protoreflect.FileDescriptor

var file_RepMsg_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x52, 0x65, 0x70, 0x4d, 0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02,
	0x70, 0x62, 0x1a, 0x14, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x73, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x01, 0x0a, 0x06, 0x55, 0x6e, 0x69,
	0x4d, 0x73, 0x67, 0x12, 0x32, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6d, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x62, 0x2e, 0x55, 0x6e, 0x69, 0x4d, 0x73,
	0x67, 0x2e, 0x4d, 0x73, 0x67, 0x4d, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07,
	0x6d, 0x73, 0x67, 0x4d, 0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x73, 0x67,
	0x4d, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x36, 0x0a, 0x06, 0x77, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x12,
	0x2c, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x70,
	0x62, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x67,
	0x1a, 0x09, 0x2e, 0x70, 0x62, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x42, 0x04, 0x5a,
	0x02, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_RepMsg_proto_rawDescOnce sync.Once
	file_RepMsg_proto_rawDescData = file_RepMsg_proto_rawDesc
)

func file_RepMsg_proto_rawDescGZIP() []byte {
	file_RepMsg_proto_rawDescOnce.Do(func() {
		file_RepMsg_proto_rawDescData = protoimpl.X.CompressGZIP(file_RepMsg_proto_rawDescData)
	})
	return file_RepMsg_proto_rawDescData
}

var file_RepMsg_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_RepMsg_proto_goTypes = []interface{}{
	(*UniMsg)(nil),         // 0: pb.UniMsg
	nil,                    // 1: pb.UniMsg.MsgMimeEntry
	(*ReplicationMsg)(nil), // 2: pb.ReplicationMsg
	(*Empty)(nil),          // 3: pb.Empty
}
var file_RepMsg_proto_depIdxs = []int32{
	1, // 0: pb.UniMsg.msg_mime:type_name -> pb.UniMsg.MsgMimeEntry
	2, // 1: pb.wsBack.Replicate:input_type -> pb.ReplicationMsg
	3, // 2: pb.wsBack.Replicate:output_type -> pb.Empty
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_RepMsg_proto_init() }
func file_RepMsg_proto_init() {
	if File_RepMsg_proto != nil {
		return
	}
	file_ReplicationMsg_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_RepMsg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_RepMsg_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_RepMsg_proto_goTypes,
		DependencyIndexes: file_RepMsg_proto_depIdxs,
		MessageInfos:      file_RepMsg_proto_msgTypes,
	}.Build()
	File_RepMsg_proto = out.File
	file_RepMsg_proto_rawDesc = nil
	file_RepMsg_proto_goTypes = nil
	file_RepMsg_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WsBackClient is the client API for WsBack service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WsBackClient interface {
	Replicate(ctx context.Context, opts ...grpc.CallOption) (WsBack_ReplicateClient, error)
}

type wsBackClient struct {
	cc grpc.ClientConnInterface
}

func NewWsBackClient(cc grpc.ClientConnInterface) WsBackClient {
	return &wsBackClient{cc}
}

func (c *wsBackClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (WsBack_ReplicateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_WsBack_serviceDesc.Streams[0], "/pb.wsBack/Replicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &wsBackReplicateClient{stream}
	return x, nil
}

type WsBack_ReplicateClient interface {
	Send(*ReplicationMsg) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type wsBackReplicateClient struct {
	grpc.ClientStream
}

func (x *wsBackReplicateClient) Send(m *ReplicationMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *wsBackReplicateClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WsBackServer is the server API for WsBack service.
type WsBackServer interface {
	Replicate(WsBack_ReplicateServer) error
}

// UnimplementedWsBackServer can be embedded to have forward compatible implementations.
type UnimplementedWsBackServer struct {
}

func (*UnimplementedWsBackServer) Replicate(WsBack_ReplicateServer) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}

func RegisterWsBackServer(s *grpc.Server, srv WsBackServer) {
	s.RegisterService(&_WsBack_serviceDesc, srv)
}

func _WsBack_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WsBackServer).Replicate(&wsBackReplicateServer{stream})
}

type WsBack_ReplicateServer interface {
	SendAndClose(*Empty) error
	Recv() (*ReplicationMsg, error)
	grpc.ServerStream
}

type wsBackReplicateServer struct {
	grpc.ServerStream
}

func (x *wsBackReplicateServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *wsBackReplicateServer) Recv() (*ReplicationMsg, error) {
	m := new(ReplicationMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _WsBack_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.wsBack",
	HandlerType: (*WsBackServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicate",
			Handler:       _WsBack_Replicate_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "RepMsg.proto",
}
